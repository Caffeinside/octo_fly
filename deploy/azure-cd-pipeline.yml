trigger:
- prod

resources:
- repo: self

pool:
  vmImage: 'ubuntu-latest'

variables:
  containerRegistry: 'docker_registry'
  deployServerServiceConnection: 'deploy_server_service_connection'

jobs:
- job: Deploy
  displayName: Deploy

  steps:
    - task: SSH@0
      displayName: 'Stop previous version'
      inputs:
        sshEndpoint: $(deployServerServiceConnection)
        runOptions: 'commands'
        commands: |
          cd .
          APP_VERSION=latest docker-compose -f docker-compose-prod.yml stop -t 30
        failOnStdErr: false

    - task: CopyFilesOverSSH@0
      displayName: 'Publish file on production server'
      inputs:
        sshEndpoint: $(deployServerServiceConnection)
        sourceFolder: ./docker
        contents: docker-compose-prod.yml
        targetFolder: .
      condition: succeededOrFailed()

    - task: SSH@0
      displayName: 'Pull new version'
      inputs:
        sshEndPoint: $(deployServerServiceConnection)
        runOptions: 'inline'
        failOnStdErr: false
        inline: |
          mkdir -p .
          cd .
          docker login $(containerRegistry) -u $(AZURE_REGISTRY_USER) -p $(AZURE_REGISTRY_PASSWORD)
          APP_VERSION=latest docker-compose -f docker-compose-prod.yml pull

    - task: SSH@0
      displayName: 'Start service'
      inputs:
        sshEndPoint: $(deployServerServiceConnection)
        runOptions: 'inline'
        failOnStdErr: false
        inline: |
          cd .
          APP_VERSION=latest docker-compose -f docker-compose-prod.yml up -d
